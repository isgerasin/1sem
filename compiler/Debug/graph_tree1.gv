digraph Tree
{
	node[shape = polygon];
";
[1695B20]"
";
[1695B20]"->";
[16954A0]"
";
[16954A0]"->"in
[1695420]"
"in
[1695420]"->"a
[1695460]"
";
[16954A0]"->";
[1695620]"
";
[1695620]"->"=
[1695520]"
"=
[1695520]"->"b
[16954E0]"
"=
[1695520]"->"+
[16955A0]"
"+
[16955A0]"->"a
[1695560]"
"+
[16955A0]"->"4
[16955E0]"
";
[1695620]"->";
[16958E0]"
";
[16958E0]"->"foo
[1695660]"
"foo
[1695660]"->"output(
[16956A0]"
"output(
[16956A0]"->"a
[16956E0]"
"foo
[1695660]"->";
[16958A0]"
";
[16958A0]"->";
[16957A0]"
";
[16957A0]"->"out
[1695720]"
"out
[1695720]"->"a
[1695760]"
";
[16957A0]"->";
[1695860]"
";
[1695860]"->"ret
[16957E0]"
"ret
[16957E0]"->"a
[1695820]"
";
[16958E0]"->";
[1695A20]"
";
[1695A20]"->"=
[1695960]"
"=
[1695960]"->"d
[1695920]"
"=
[1695960]"->"output(
[16959A0]"
"output(
[16959A0]"->"b
[16959E0]"
";
[1695A20]"->";
[1695AE0]"
";
[1695AE0]"->"out
[1695A60]"
"out
[1695A60]"->"a
[1695AA0]"
}